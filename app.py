# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ryX2vMbhGo--gOOPwVfhx9Y7h920gNl
"""

import streamlit as st

# 🧠 Define memory class
class Memory:
    def __init__(self):
        self.episodic_memory = []
        self.semantic_memory = {}

    def store_episode(self, episode):
        self.episodic_memory.append(episode)

    def store_fact(self, key, value):
        self.semantic_memory[key.lower().strip()] = value

    def recall_fact(self, key):
        return self.semantic_memory.get(key.lower().strip(), "I don't know that yet.")

# 🧠 Initialize memory (persists per session)
if 'memory' not in st.session_state:
    st.session_state.memory = Memory()

memory = st.session_state.memory

# 🧠 Streamlit UI
st.title("🧠 AI Memory Agent")
st.write("Ask me a question, or teach me something using the format: `teach [key] [value]`.")

# User input
user_input = st.text_input("You:", "")

if user_input:
    memory.store_episode(f"User: {user_input}")

    # Teaching mode
    if user_input.lower().startswith("teach "):
        try:
            _, key, value = user_input.split(" ", 2)
            memory.store_fact(key, value)
            response = f"Got it! I've learned that {key} is {value}."
        except:
            response = "⚠️ Format error. Use: teach [key] [value]"

    # Asking mode
    else:
        key = user_input.lower().replace("what is ", "").replace("who is ", "").replace("where is ", "").replace("when is ", "").strip()
        response = memory.recall_fact(key)

    memory.store_episode(f"Agent: {response}")
    st.markdown(f"**Agent:** {response}")

# 📂 Semantic Memory
with st.expander("🗂️ Semantic Memory"):
    for k, v in memory.semantic_memory.items():
        st.write(f"**{k}** → {v}")

# 📜 Episodic Memory
with st.expander("📜 Episodic Memory"):
    for e in memory.episodic_memory:
        st.write(e)